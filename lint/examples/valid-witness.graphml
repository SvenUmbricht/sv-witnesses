<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>./while_infinite_loop_1.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">correctness_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.9.2-svn-35683 / svcomp21</data>
  <data key="specification">// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer &lt;https://www.sosy-lab.org&gt;
//
// SPDX-License-Identifier: Apache-2.0

// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error()/reach_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} || MATCH {reach_error($?)} || MATCH FUNCTIONCALL "reach_error"
      -&gt; ERROR("unreach-call: $rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">./while_infinite_loop_1.c</data>
  <data key="programhash">6835149c4278fd8af0ce273d8cc15b325ec6738caba22fa2c7b2c4b417fc898f</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2020-11-01T16:16:04+01:00</data>
  <node id="N14">
   <data key="entry">true</data>
  </node>
  <node id="N15"/>
  <edge source="N14" target="N15">
   <data key="startline">12</data>
   <data key="endline">12</data>
   <data key="startoffset">374</data>
   <data key="endoffset">384</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="N20">
   <data key="invariant">x == (0)</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N15" target="N20">
   <data key="enterLoopHead">true</data>
   <data key="startline">13</data>
   <data key="endline">13</data>
   <data key="startoffset">389</data>
   <data key="endoffset">395</data>
  </edge>
  <node id="N5">
   <data key="invariant">cond == (1)</data>
   <data key="invariant.scope">__VERIFIER_assert</data>
  </node>
  <edge source="N20" target="N5">
   <data key="startline">17</data>
   <data key="endline">17</data>
   <data key="startoffset">418</data>
   <data key="endoffset">439</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="N8"/>
  <edge source="N5" target="N8">
   <data key="startline">6</data>
   <data key="endline">6</data>
   <data key="startoffset">312</data>
   <data key="endoffset">315</data>
  </edge>
  <node id="N10">
   <data key="invariant">cond == (1)</data>
   <data key="invariant.scope">__VERIFIER_assert</data>
  </node>
  <edge source="N5" target="N10">
   <data key="startline">6</data>
   <data key="endline">6</data>
   <data key="startoffset">312</data>
   <data key="endoffset">315</data>
  </edge>
  <node id="N4"/>
  <edge source="N10" target="N4">
   <data key="startline">9</data>
   <data key="endline">9</data>
   <data key="startoffset">363</data>
   <data key="endoffset">369</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <edge source="N4" target="N20">
   <data key="enterLoopHead">true</data>
   <data key="startline">17</data>
   <data key="endline">17</data>
   <data key="startoffset">418</data>
   <data key="endoffset">441</data>
  </edge>
  <node id="N1"/>
  <edge source="N8" target="N1">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">333</data>
   <data key="endoffset">343</data>
   <data key="enterFunction">reach_error</data>
  </edge>
  <edge source="N1" target="N10">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">333</data>
   <data key="endoffset">346</data>
   <data key="returnFrom">reach_error</data>
  </edge>
 </graph>
</graphml>
